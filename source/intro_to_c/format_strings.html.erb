---
title: Format Strings
---

<p>
  It's hard to play with types without the ability to print them
  to the console, but in order to do so, we need to understand
  format strings. Back in the Hello World!  program, we used NSLog
  to print out a fixed string:
</p>

<code>NSLog(@"Hello World!");</code>

<p>
  But now we want to print out variables as well. Unfortunately,
  we need to tell NSLog the type of the variable as well. Each
  type has an associated token of the form <code>%&lt;x&gt;</code>
  where <code>x</code> is determined by the type of the variable.
</p>

<dl>
  <dt>Integers</dt>
  <dd>%i</dd>
  <dt>Decimals (floats)</dt>
  <dd>%f</dd>
  <dt>NSString</dt>
  <dd>%@</dd>
</dl>

<pre>
NSString *name = @"The Tempest";
float height = 1.75;
int age = 42;
NSLog(@"%@ is my favorite Shakepear play", name);
NSLog(@"You must be at least %f meteres tall to ride this ride", height);
NSLog(@"That person over there is %i years old", age);
</pre>

<p>
  In each case, the token <code>%&lt;x&gt;</code> was replaced by the 
  value of the variable. We can even insert multiple values into a single
  format string.
</p>

<pre>
NSLog(@"I am casting a performance of %@. I need to find an actress over %i who
is at least %f meteres tall.", name, age, height);
</pre>

<p>
  Notice that the variables are specified in the same order as the tokens they are
  to replace.
</p>

<section>
  <h1>Exercises</h1>

  <ol>
    <li>
      Print out a variable of each type to the console.
    </li>
    <li>
      Find out what happens when you use the incorrect token for a
      variable.
    </li>
  </ol>
</section>
