---
title: C Types
---

<h2>What does Static Typing Mean?</h2>
<p>
  C is a statically typed language. This means that variables must
  be declared with a type and cannot change through the lifetime
  of the program. In a dynamicly typed language such as Ruby or
  Javascript, variables can hold data of any type over their
  lifetime. For example, in Javascript:
</p>

<pre>
> var dyanmicVar;
undefined
> dynamicVar = "a string";
'a string'
> typeof dynamicVar;
'string'
> dynamicVar = 2;
2
> typeof dynamicVar;
'number'
</pre>

<p>Now lets try the same thing in C</p>

<pre>
NSString *staticVar = @"a string";
staticVar = 2;
</pre>

<p>
  This should generate a compilre error <code>Implicit conversion of
    'int' to 'NSString *' is disallowed with ARC</code>. The first
    major difference here is that there is a program called the
    compiler that is attempting to enforce type correctness. While
    this can be irritating at first, static typing can also help catch
    errors in your programs. For example, in the Javascript program
    above, what if some part of the program was expecing
  <code>dynamicVar</code> to be a string. You wouldn't know there was an issue until
  actually executing the program. And then, you would have to back up 
  to the location where <code>dynamicVar</code> was assigned a non-string. 
</p>

<p>
  Dynamic vs. static typing is one of those issues in programming
  language design that people feel strongly about. Ultimatley we don't
  have a choice since Objective-C was chosen for us, so lets learn to
  take advantage of the warnings and errors given by the compiler.
</p>

<h2>C Built-In Types</h2>

<%= partial :types %>

<p>
  That's all there is. With nothing but numbers, words, and
  collections of the two, we can describe most any concept you
  want.
</p>

<section>
  <h1>Excersizes</h1>

  <ol>
    <li>
      Create variables of different types and try assigning them to
      one another. What kind of compiler messages do you get?
    </li>
  </ol>
</section>
    
