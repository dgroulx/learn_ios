---
title: C Summary
---

<h2>Types</h2>

<%= partial :types %>

<h2>Format Strings</h2>
<dl>
  <dt>Integers</dt>
  <dd>%i</dd>
  <dt>Decimals (floats)</dt>
  <dd>%f</dd>
  <dt>NSString</dt>
  <dd>%@</dd>
</dl>
<pre>
NSString *name = @"Imp";
float height = 3.43;
int age = 4000;
NSLog(@"I saw a %@ that was %f feet tall and %d years old", name, height, age);
</pre>

<h2>Conditionals </h2>
<pre>
if (condition) {
  // Do if condition is true
} else {
  // Do if condition is false
}
</pre>

<h2>Loops</h2>

<h3>While</h3>
<pre>
while (condition) {
  // Run this as long as condition is true
}
</pre>

<h3>For</h3>
<pre>
for (initialize; test; increment) {
// Run this as long as test passes, preform increment 
// at the end of every loop
}
</pre>

<h2>Functions</h2>

<pre>
rtype functionName(type1 arg1, type2 arg2)
</pre>

<h2>Including Libraries</h2>
<pre>
#import <math.h> // Angle brackets for accessing built-in functions
#import "MyAwesomeUtility.h" // Quotes for accessing user functions
</pre>

<section>
  <h1>Excersizes</h1>

  <ol>
    <li>
      Write a program that will convert temperatures from Celsius to
      Farenheit and back. The program will do this until the user
      decides to quit.
    </li>
    <li>
      Write a text-based adventure game. The player starts at a random
      location and must find the treasure. Represent the player, treasure,
      and map extent with structs. 
    </li>
  </ol>
</section>
